import java.util.ArrayList;
import java.util.List;


public class MainClassState {
	
	
	public static void main(String args[]) {
		
		
	        int arr[][] = {{1,2,3},{5,0,6},{4,7,8}};
	        State inp = new State(arr);
	        int arr2[][] = new int[3][3];
	        //arr2 = arr.clone();
	        List<State> out = new ArrayList<State>();
	        out.addAll(inp.getSuccesorStates(inp));
	        
	    }

	    

	    
}



import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

    public class State {

        int[][] blocks = new int[3][3];
        int fVal;
        int gVal;
        int hVal;
        int noOfSuccesors;
        int spaceIndex;
        int spaceX;
        int spaceY;
        
        public State(int[][] blocks) {
			super();
			this.blocks = getBlocks(blocks);
			System.out.println(getSpaceIndex());
            System.out.println(getNoOfSuccesors());
		}

		public State() {
			super();
			// TODO Auto-generated constructor stub
		}
		
		public int[][] getBlocks(int[][] blocks) {
			int[][] temp = new int[3][3];
			
			for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    temp[i][j] = blocks[i][j];
                    }
                }
            
			return temp;
		}

		public int getSpaceIndex() {
            int i,j;
            for (i = 0; i < 3; i++) {
                for (j = 0; j < 3; j++) {
                    System.out.println(this.blocks[i][j]);
                    if(this.blocks[i][j] == 0) {
                        this.spaceX = i;
                        this.spaceY = j;
                        this.spaceIndex = i*10+j;
                        return i*10+j;
                    }
                }
            }
            return 0;
        }
        
       
        
        public int getNoOfSuccesors() {
            if(this.spaceIndex == 0 || this.spaceIndex == 2 || this.spaceIndex == 20 || this.spaceIndex == 22){
                this.noOfSuccesors = 2;
                return 2;
            }else if(this.spaceIndex == 11) {
                this.noOfSuccesors = 4;
                return 4;
            }else {
                this.noOfSuccesors = 3;
                return 3;
            }
        }
        
        
        @Override
        public String toString() {
            return "State [blocks=" + blocks + ", fVal=" + fVal + ", gVal=" + gVal + ", hVal=" + hVal
                    + ", noOfSuccesors=" + noOfSuccesors + ", spaceIndex=" + spaceIndex + ", spaceX=" + spaceX
                    + ", spaceY=" + spaceY + "]";
        }
        
        
        public  State getNewState(State state, int x, int y) {
	        // TODO Auto-generated method stub
	        int[][] inparr = state.blocks.clone();
	        State state1 = new State(inparr);
	        System.out.println(state1.blocks[state1.spaceX + x][state1.spaceY + y]);
	        int z = state1.blocks[state1.spaceX + x][state1.spaceY + y];
	        state1.blocks[state1.spaceX + x][state1.spaceY + y] = 0;
	        state1.blocks[state1.spaceX][state1.spaceY] = z;
	        System.out.println(state1.blocks[state1.spaceX + x][state1.spaceY + y]);
	        return state1;
	    }
        
        public  List<State> getSuccesorStates(State state) {
	        // TODO Auto-generated method stub
	        List<State> succesorStates = new ArrayList<State>();
	        if(state.noOfSuccesors == 2){
	            if(state.spaceIndex == 0) {
	                succesorStates.add(getNewState(state, 0, 1));
	                succesorStates.add(getNewState(state, 1, 0));
	            } else if(state.spaceIndex == 2) {
	                succesorStates.add(getNewState(state, 0, 1));
	                succesorStates.add(getNewState(state, -1, 0));
	            } else if(state.spaceIndex == 20) {
	                succesorStates.add(getNewState(state, 0, 1));
	                succesorStates.add(getNewState(state, -1, 0));
	            } else if(state.spaceIndex == 22) {
	                succesorStates.add(getNewState(state, 0, -1));
	                succesorStates.add(getNewState(state, -1, 0));
	            }
	        } else if(state.noOfSuccesors == 4) {
	                
	                succesorStates.add(getNewState(state, 0, -1));
	                succesorStates.add(getNewState(state, 1, 0));
	                succesorStates.add(getNewState(state, 0, 1));
	                succesorStates.add(getNewState(state, -1, 0));
	            
	        } else {
	            if(state.spaceIndex == 1) {
	                succesorStates.add(getNewState(state, 0, 1));
	                succesorStates.add(getNewState(state, 0, -1));
	                succesorStates.add(getNewState(state, 1, 0));
	            } else if(state.spaceIndex == 10) {
	                succesorStates.add(getNewState(state, 0, 1));
	                succesorStates.add(getNewState(state, -1, 0));
	                succesorStates.add(getNewState(state, 1, 0));
	            } else if(state.spaceIndex == 12) {
	                succesorStates.add(getNewState(state, 0, 1));
	                succesorStates.add(getNewState(state, 0, -1));
	                succesorStates.add(getNewState(state, -1, 0));
	            } else if(state.spaceIndex == 21) {
	                succesorStates.add(getNewState(state, 0, 1));
	                succesorStates.add(getNewState(state, 0, -1));
	                succesorStates.add(getNewState(state, -1, 0));
	            }
	        }
	        return succesorStates;
	        
	    }

        
    }
